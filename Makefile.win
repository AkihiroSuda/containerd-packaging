GOARCH=$(shell docker run --rm golang go env GOARCH 2>/dev/null)
ARCH:=$(shell uname -m)
REF?=$(shell git ls-remote https://github.com/containerd/containerd.git | grep master | awk '{print $$1}')
RUNC_REF?=425e105d5a03fabd737a126ad93d62a9eeede87f
PACKAGE?=containerd.io
GOVERSION?=1.11.8
GOLANG_IMAGE?=golang:1.11.8

BUILDER_IMAGE=containerd-builder-$@-$(GOARCH):$(shell git rev-parse --short HEAD)
BUILD=docker build \
	$(BUILD_IMAGE_FLAG) \
	--build-arg GOLANG_IMAGE="$(GOLANG_IMAGE)" \
	--build-arg REF="$(REF)" \
	--build-arg PACKAGE="$(PACKAGE)" \
	--build-arg RUNC_REF="$(RUNC_REF)"

CONTAINERD_REPO?=containerd/containerd
CONTAINERD_BRANCH?=release/1.2
CONTAINERD_DIR?=$(shell basename $(CONTAINERD_REPO))
CONTAINERD_MOUNT?=C:\gopath\src\github.com\containerd\containerd
WINDOWS_BINARIES=containerd ctr
WIN_CRYPTO=dockereng/go-crypto-swap:windows-go1.11.8

	# Build tags seccomp and apparmor are needed by CRI plugin.
BUILDTAGS ?= seccomp apparmor
GO_TAGS=$(if $(BUILDTAGS),-tags "$(BUILDTAGS)",)
GO_LDFLAGS=-ldflags '-s -w -X $(PKG)/version.Version=$(VERSION) -X $(PKG)/version.Revision=$(REVISION) -X $(PKG)/version.Package=$(PACKAGE) $(EXTRA_LDFLAGS)'

$(CONTAINERD_DIR):
	git clone git@github.com:$(CONTAINERD_REPO)
	git -C $(CONTAINERD_DIR) checkout $(CONTAINERD_BRANCH)

.PHONY: windows-binaries
windows-binaries: $(CONTAINERD_DIR)
	for binary in $(WINDOWS_BINARIES); do \
		(set -x; docker run --rm -v "$(CURDIR)/$(CONTAINERD_DIR):$(CONTAINERD_MOUNT)" -w "$(CONTAINERD_MOUNT)" $(WIN_CRYPTO) go build $(GO_BUILD_FLAGS) $(GO_LDFLAGS) $(GO_TAGS) ./cmd/$$binary) || exit 1; \
	done
	ls $(CONTAINERD_DIR) | grep '.exe'

.PHONY: clean
clean:
	-$(RM) -r $(CONTAINERD_DIR)
